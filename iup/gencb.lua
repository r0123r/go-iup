code_head = [[
// Copyright (C) 2011-2012 visualfc. All rights reserved.
// Use of this source code is governed by a MIT license 
// that can be found in the COPYRIGHT file.

// gencb.lua
// MACHINE GENERATED BY THE COMMAND ABOVE; DO NOT EDIT

package iup

/*
#include <stdlib.h>
#include <iup.h>
#define GOIUP "_GOIUP_"
]]

code_head_d = [[
// IUP definitions not defined
#define IUP_UNMAP_CB        "UNMAP_CB"
#define IUP_DESTROY_CB      "DESTROY_CB"
#define IUP_CARET_CB        "CARET_CB"
#define IUP_DBLCLICK_CB     "DBLCLICK_CB"
#define IUP_EDIT_CB         "EDIT_CB"
#define IUP_MULTISELECT_CB  "MULTISELECT_CB"
#define IUP_VALUECHANGED_CB "VALUECHANGED_CB"
#define IUP_TABCHANGE_CB    "TABCHANGE_CB"
#define IUP_TABCHANGEPOS_CB "TABCHANGEPOS_CB"
#define IUP_SPIN_CB         "SPIN_CB"
#define IUP_FILE_CB			"FILE_CB"
#define IUP_FOCUS_CB		"FOCUS_CB"
#define IUP_TOUCH_CB		"TOUCH_CB"
#define IUP_MULTITOUCH_CB	"MULTITOUCH_CB"
#define IUP_DROPDOWN_CB		"DROPDOWN_CB"
#define IUP_MULTISELECTION_CB "MULTISELECTION_CB"
#define IUP_SHOWRENAME_CB	"SHOWRENAME_CB"
#define IUP_RENAME_CB		"RENAME_CB"
#define IUP_DRAGDROP_CB		"DRAGDROP_CB"
#define IUP_NODEREMOVED_CB	"NODEREMOVED_CB"
#define IUP_BUTTON_PRESS_CB	"BUTTON_PRESS_CB"
#define IUP_BUTTON_RELEASE_CB "BUTTON_RELEASE_CB"
#define IUP_ACTION_CB		"ACTION_CB"
#define IUP_RELEASE_CB		"RELEASE_CB"
#define IUP_SCROLLTOP_CB	"SCROLLTOP_CB"
#define IUP_BGCOLOR_CB		"BGCOLOR_CB"
#define IUP_FGCOLOR_CB		"FGCOLOR_CB"
#define IUP_FONT_CB			"FONT_CB"
#define IUP_MARK_CB			"MARK_CB"
#define IUP_MARKEDIT_CB		"MARKEDIT_CB"
#define IUP_DELETE_CB		"DELETE_CB"
#define IUP_DELETEBEGIN_CB	"DELETEBEGIN_CB"
#define IUP_DELETEEND_CB	"DELETEEND_CB"
#define IUP_SELECTBEGIN_CB	"SELECTBEGIN_CB"
#define IUP_SELECTEND_CB	"SELECTEND_CB"
#define IUP_EDITBEGIN_CB	"EDITBEGIN_CB"
#define	IUP_EDITEND_CB		"EDITEND_CB"
#define IUP_PREDRAW_CB		"PREDRAW_CB"
#define IUP_POSTDRAW_CB		"POSTDRAW_CB"
#define IUP_COMPLETED_CB	"COMPLETED_CB"
#define IUP_ERROR_CB		"ERROR_CB"
#define IUP_NAVIGATE_CB		"NAVIGATE_CB"
#define IUP_NEWWINDOW_CB	"NEWWINDOW_CB"
]]

code_import = [[
*/
import "C"
import (
	"unsafe"
)
]]

code_n_case_head = [[
func (h *Handle) SetCallback(fn interface{}) {
	switch v := fn.(type) {
]] 

code_n_case_end = [[
	}
}
]]

code_id_head = [[
const (
]]
code_id_end = [[
)
]]

code_reg_head = [[
func RegisterAllClass() {
]]
code_reg_head_ctls = [[
func RegisterCtlsClass() {
]]
code_reg_end = [[
}
]]

-- global table

t_cb = {}

t_cmn_call = {}
t_id_call = {}

t_id_tag = {}
t_id_reg = {}
t_id_new = {}
t_id_callback = {}
t_id_case = {}

t_c_tmpl = {}
t_go_type = {}
t_go_tmpl = {}

item_name = nil

function begin_common()
	t_id_case = {}
	t_id_call = {}
end


function end_common()
local head = [[
func common_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
]] 
local _end = [[
	default:
		return false
	}
	return true
}
]]
	t_cmn_call = t_id_call
	t_id_call = {}
	t_id_callback[#t_id_callback+1] = head .. table.concat(t_id_case) .. _end
	t_id_case = {}
end

function begin_item(name)
	t_id_case = {}
	t_id_call = {}
	assert(item_name == nil,"error call end_item")
	item_name = name
end

function end_item(use_common)
	local Name = item_name
	item_name = nil
	if Name == "_" then
		return
	end
	use_common = use_common or false
local _head0 = [[
func name_SetCallback(h *Handle, fn interface{}) bool {
]] 
local _end0 = [[
	return false
}
]]
local _head = [[
func name_SetCallback(h *Handle, fn interface{}) bool {
	switch fn.(type) {
]] 
local _end1 = [[
	default:
		return false
	}
	return true
}
]]
local _end2 = [[
	default:
		return common_SetCallback(h,fn)
	}
	return true
}
]]
local _reg = [[
	RegisterClass("CLS",NewClassInfo("CLS",name_SetCallback))
]]
local _id = [[
	TAG = "CLS"
]]
local _new = [[
// Iup control NAME
//
// CALLBACKS
func NAME(a ...interface{}) *Handle {
	return New(TAG, a...)
}
]]
	local tag = string.upper(Name)
	local cls = string.lower(Name)
	if use_common == true then
		for k, v in ipairs(t_cmn_call) do
			t_id_call[#t_id_call+1] = v
		end
	end
	local callback_doc = table.concat(t_id_call,"\n//\n// ")
	
	local head = _head
	if #t_id_case == 0 then
		head = _head0--string.gsub(head,"V","_")
	else
		head = string.gsub(head,"V","v")
	end
	head = string.gsub(head,"name",string.lower(Name))
	local reg = string.gsub(_reg,"CLS",cls)
	reg = string.gsub(reg,"name",string.lower(Name))
	local id = string.gsub(_id,"TAG",tag)
	id = string.gsub(id,"CLS",cls)
	local new = string.gsub(_new,"NAME",Name)
	new = string.gsub(new,"TAG",tag)	
	new = string.gsub(new,"CALLBACKS",callback_doc)
	t_id_tag[#t_id_tag+1] = id
	t_id_reg[#t_id_reg+1] = reg	
	t_id_new[#t_id_new+1] = new
	local _end = _end1
	if #t_id_case == 0 then
		_end = _end0
	end
	if use_common == true then
		_end = _end2
	end
	t_id_callback[#t_id_callback+1] = head .. table.concat(t_id_case) .. _end
	t_id_case = {}	
end

b_change_s = false
-- funcion in
function gen_in(ACT,ActCB,fmt,...)
	local fmt = fmt or ""
	t_id_call[#t_id_call+1] = "Callback ".. ACT .. " : func(arg *"..ActCB..")"
local c_tmpl_i = [[
extern int goActionCb(PARAMS_C);
static void iupSetActionCb(Ihandle* ih)
{
	IupSetCallback(ih,IUP_ACTION,(Icallback)&goActionCb);
}
]]
local c_tmpl_s = [[
extern char* goActionCb(PARAMS_C);
static void iupSetActionCb(Ihandle* ih)
{
	IupSetCallback(ih,IUP_ACTION,(Icallback)&goActionCb);
}
]]

local go_type = [[
// Iup callback IUP_ACTION
type ActionCb struct {
	PARAM_TYPE
}
]]

local go_case = [[
	case func(*ActionCb):
		C.iupSetActionCb(h.p)
		h.funcs["ActionCb"] = fn
]]

local go_tmpl_i = [[
//export goActionCb
func goActionCb(PARAMS_GO) int {		
	ih := ptoHandle(p)
	if ih == nil {
		return DEFAULT
	}
	if h,ok := ih.(*Handle); ok {
		if f,ok := h.funcs["ActionCb"]; ok {
			if fn, ok := f.(func(*ActionCb)); ok {
				arg := &ActionCb{PARAMS_ACT}
				fn(arg)
				return arg.Return
			}
		}
	}
	return DEFAULT
}
]]
local go_tmpl_s = [[
//export goActionCb
func goActionCb(PARAMS_GO) *C.char {
	ih := ptoHandle(p)
	if ih == nil {
		return nil
	}
	if h,ok := ih.(*Handle); ok {
		if f,ok := h.funcs["ActionCb"]; ok {
			if fn, ok := f.(func(*ActionCb)); ok {	
				arg := &ActionCb{PARAMS_ACT}
				fn(arg)
				size := len(arg.Return)
				ch := make([]byte,size+1)
				copy(ch,arg.Return)
				ch[size] = 0
				return (*C.char)(unsafe.Pointer(&ch[0]))
			}
		}
	}
	return nil
}
]]

	local arg = {...}
	local tb_c = {n="void*",i="int",I="int*",s="char*",f="float",F="float*",c="unsigned char",C="void*",d="double",U="unsigned int*"}
	local tb_go = {n="unsafe.Pointer",i="int",I="*int",s="*C.char",f="float32",F="*float32",c="C.uchar",C="unsafe.Pointer",d="float64",U="*C.uint"}
	local tb_type = {n="*Handle",i="int",I="*int",s="string",f="float32",F="*float32",c="byte",C="unsafe.Pointer",d="float64",U="*uint"}
	local p_type ={}
	local p_go = {}
	local p_c = {}
	local p_act = {}
	p_c[#p_c+1] = "void*"
	p_type[#p_type+1] = "Sender *Handle"
	if b_change_s == true then
		p_type[#p_type+1] = "Return string"
	else
		p_type[#p_type+1] = "Return int"
	end
	p_go[#p_go+1] = "p unsafe.Pointer"
	p_act[#p_act+1] = "h"
	if b_change_s == true then
		p_act[#p_act+1] = "\"\""
	else
		p_act[#p_act+1] = "DEFAULT"
	end
	if fmt ~= "" then
		assert(#fmt == #arg,"conv error fmt ".. ACT)
		for i=1,#fmt do
			local f = string.sub(fmt,i,i)
			local a = arg[i]
			local n = "N" .. i
			p_c[#p_c+1] = tb_c[f]
			p_type[#p_type+1] = a .. " " .. tb_type[f]
			p_go[#p_go+1] = n .. " " .. tb_go[f]
			if f == "s" then
				p_act[#p_act+1] = "C.GoString(" .. n .. ")"
			elseif f == "n" then
				p_act[#p_act+1] = "(*Handle)(" .. n .. ")"	
			elseif f == "c"	then
				p_act[#p_act+1] = "byte(".. n ..")"
			elseif f == "U" then
				p_act[#p_act+1] = "(*uint)(unsafe.Pointer(".. n .. "))"
			else
				p_act[#p_act+1] = n
			end
		end
	end
	
	
	local c_tmpl = c_tmpl_i
	local go_tmpl = go_tmpl_i
	if b_change_s == true then
		c_tmpl = c_tmpl_s
		go_tmpl = go_tmpl_s
	end
	c_tmpl = string.gsub(c_tmpl,"ACTION",ACT)
	c_tmpl = string.gsub(c_tmpl,"ActionCb",ActCB)
	c_tmpl = string.gsub(c_tmpl,"PARAMS_C",table.concat(p_c,","))
	go_type = string.gsub(go_type,"ACTION",ACT)
	go_type = string.gsub(go_type,"ActionCb",ActCB)
	go_type = string.gsub(go_type,"PARAM_TYPE",table.concat(p_type,"\n\t"))
	go_case = string.gsub(go_case,"ActionCb",ActCB)
	go_tmpl = string.gsub(go_tmpl,"ActionCb",ActCB)
	go_tmpl = string.gsub(go_tmpl,"PARAMS_GO",table.concat(p_go,","))
	go_tmpl = string.gsub(go_tmpl,"PARAMS_ACT",table.concat(p_act,","))
	
	if t_cb[ActCB] ~= nil then
		assert(t_cb[ActCB] == fmt,ActCB .. " unequal format ".. t_cb[ActCB] .. "<>".. fmt)		
		t_id_case[#t_id_case+1] = go_case
		return
	end
	t_cb[ActCB] = fmt
	
	t_c_tmpl[#t_c_tmpl+1] = c_tmpl
	t_go_type[#t_go_type+1] = go_type
	t_id_case[#t_id_case+1] = go_case
	t_go_tmpl[#t_go_tmpl+1] = go_tmpl
end

function gen_sn(ACT,ActCB,fmt,...)
	b_change_s = true
	gen_in(ACT,ActCB,fmt,...)
	b_change_s = false
end

function clear()
	t_cb = {}
	
	t_id_tag = {}
	t_id_reg = {}
	t_id_new = {}
	t_id_callback = {}
	t_id_case = {}
	
	t_c_tmpl = {}
	t_go_type = {}
	t_go_tmpl = {}
	
	item_name = nil
	all = {}
end

function gen_iup() 
	begin_common()
	gen_in("DEFAULT_ACTION","CommonDefaultAction")
	gen_in("MAP_CB","CommonMap")
	gen_in("UNMAP_CB","CommonUnmap")
	gen_in("DESTROY_CB","CommonDestroy")
	gen_in("GETFOCUS_CB","CommonGetFocus")
	gen_in("KILLFOCUS_CB","CommonKillFocus")
	gen_in("ENTERWINDOW_CB","CommonEnterWindow")
	gen_in("LEAVEWINDOW_CB","CommonLeaveWindow")
	gen_in("HELP_CB","CommonHelp")			
	gen_in("K_ANY","CommonKeyAny","i","Key")	
	end_common()
	
	begin_item("Dialog")
	gen_in("CLOSE_CB","DialogClose")
	gen_in("RESIZE_CB","DialogResize","ii","Width","Height")
	gen_in("DROPFILES_CB","DialogDropFiles","siii","FileName","Num","X","Y")
	gen_in("SHOW_CB","DialogShow","i","State")
	end_item(true)
	
	begin_item("FileDlg")
	gen_in("FILE_CB","FileDlgFile","ss","FileName","Status")	
	gen_in("HELP_CB","CommonHelp")
	end_item()
	
	begin_item("MessageDlg")
	gen_in("HELP_CB","CommonHelp")
	end_item()

	begin_item("ColorDlg")
	gen_in("HELP_CB","CommonHelp")
	end_item()

	begin_item("FontDlg")
	gen_in("HELP_CB","CommonHelp")
	end_item()
	
	begin_item("Fill")						
	end_item()	
	
	begin_item("Hbox")						
	end_item()		
	
	begin_item("Vbox")						
	end_item()		

	begin_item("Zbox")						
	end_item()		
	
	begin_item("Radio")
	end_item()
	
	begin_item("Normalizer")						
	end_item()		
		
	begin_item("Cbox")						
	end_item()		
								
	begin_item("Sbox")						
	end_item()		
				
	begin_item("Split")						
	end_item()	
	
	begin_item("Item")	
	gen_in("ACTION","ItemAction")
	gen_in("HIGHLIGHT_CB","ItemHighlight")
	gen_in("MAP_CB","CommonMap")
	gen_in("UNMAP_CB","CommonUnmap")
	gen_in("HELP_CB","CommonHelp")			
	end_item()
	
	begin_item("Menu")
	gen_in("OPEN_CB","MenuOpen")
	gen_in("MENUCLOSE_CB","MenuClose")
	gen_in("MAP_CB","CommonMap")
	gen_in("UNMAP_CB","CommonUnmap")	
	end_item()
	
	begin_item("Separator")
	end_item()
	
	begin_item("SubMenu")
	gen_in("HIGHLIGHT_CB","SubMenuHighlight")
	gen_in("MAP_CB","CommonMap")
	gen_in("UNMAP_CB","CommonUnmap")		
	end_item()
	
	begin_item("Clipboard")
	end_item()

	begin_item("Timer")
	gen_in("ACTION","TimerAction")
	end_item()
	
	begin_item("User")
	end_item()
																																																																								
	begin_item("Button")
	gen_in("ACTION","ButtonAction")
	gen_in("BUTTON_CB","MouseButton","iiiis","Button","Pressed","X","Y","Status")
	end_item(true)
	
	begin_item("Canvas")
	gen_in("ACTION","CanvasAction")
	gen_in("BUTTON_CB","MouseButton","iiiis","Button","Pressed","X","Y","Status")
	gen_in("DROPFILES_CB","CanvasDropFiles","siii","FileName","Num","X","Y")
	gen_in("FOCUS_CB","CanvasFocus","i","Focus")
	gen_in("MOTION_CB","MouseMotion","iis","X","Y","Status")
	gen_in("KEYPRESS_CB","CanvasKeyPress","ii","C","Press")
	gen_in("RESIZE_CB","CanvasResize","ii","Width","Height")
	gen_in("SCROLL_CB","CanvasScroll","iff","Op","PosX","PosY")
	gen_in("TOUCH_CB","TouchEvent","iis","X","Y","State")
	gen_in("MULTITOUCH_CB","MultiTouchEvent","iIIII","Count","Pid","Px","Py","PState")
	gen_in("WHEEL_CB","CanvasWheel","fiis","Delta","X","Y","Status")
	gen_in("WOM_CB","CanvasWom","i","State")
	end_item(true)	
	
	begin_item("Frame")
	gen_in("MAP_CB","CommonMap")
	gen_in("UNMAP_CB","CommonUnmap")			
	end_item()

	begin_item("Label")
	gen_in("BUTTON_CB","MouseButton","iiiis","Button","Pressed","X","Y","Status")
	gen_in("DROPFILES_CB","LabelDropFiles","siii","FileName","Num","X","Y")
	gen_in("MAP_CB","CommonMap")
	gen_in("UNMAP_CB","CommonUnmap")	
	gen_in("ENTERWINDOW_CB","CommonEnterWindow")
	gen_in("LEAVEWINDOW_CB","CommonLeaveWindow")			
	end_item()

	begin_item("List")
	gen_in("ACTION","ListAction","sii","Text","Item","State")
	gen_in("BUTTON_CB","MouseButton","iiiis","Button","Pressed","X","Y","Status")	
	gen_in("CARET_CB","ListCaret","iii","Lin","Col","Pos")
	gen_in("DBLCLICK_CB","ListDblclick","is","Item","Text")
	gen_in("DROPDOWN_CB","ListDropDown","i","State")
	gen_in("DROPFILES_CB","ListDropFiles","siii","FileName","Num","X","Y")
	gen_in("EDIT_CB","ListEdit","is","C","NewValue")
	gen_in("MOTION_CB","MouseMotion","iis","X","Y","Status")
	gen_in("MULTISELECT_CB","ListMultiSelect","s","Value")
	gen_in("VALUECHANGED_CB","ValueChanged")
	end_item(true)
	
	begin_item("ProgressBar")	
	gen_in("MAP_CB","CommonMap")
	gen_in("UNMAP_CB","CommonUnmap")		
	end_item()

	begin_item("Spin")	
	gen_in("SPIN_CB","SpinInc","i","Inc")
	end_item()

	begin_item("SpinBox")	
	gen_in("SPIN_CB","SpinBoxInc","i","Inc")
	end_item()
	
	begin_item("Tabs")
	gen_in("TABCHANGE_CB","TabsChange","nn","NewTab","OldTab")
	gen_in("TABCHANGEPOS_CB","TabsChangePos","ii","NewPos","OldPos")
	end_item(true)
		
	begin_item("Text")
	gen_in("ACTION","TextAction","is","C","NewValue")
	gen_in("BUTTON_CB","MouseButton","iiiis","Button","Pressed","X","Y","Status")	
	gen_in("CARET_CB","TextCaret","iii","Lin","Col","Pos")
	gen_in("DROPFILES_CB","TextDropFiles","siii","FileName","Num","X","Y")
	gen_in("MOTION_CB","MouseMotion","iis","X","Y","Status")
	gen_in("SPIN_CB","TextSpin","i","Inc")
	gen_in("VALUECHANGED_CB","ValueChanged")
	end_item(true)
						
	begin_item("Toggle")						
	gen_in("ACTION","ToggleAction","i","State")
	gen_in("VALUECHANGED_CB","ValueChanged")
	end_item(true)
	
	begin_item("Tree")
	gen_in("SELECTION_CB","TreeSelection","ii","Id","Status")
	gen_in("MULTISELECTION_CB","TreeMultiSelection","Ii","Ids","N")
	gen_in("BRANCHOPEN_CB","TreeBranchOpen","i","Id")
	gen_in("BRANCHCLOSE_CB","TreeBranchClose","i","Id")
	gen_in("EXECUTELEAF_CB","TreeExecuteLeaf","i","Id")
	gen_in("SHOWRENAME_CB","TreeShowRename","i","Id")
	gen_in("RENAME_CB","TreeRename","is","Id","Title")
	gen_in("DRAGDROP_CB","TreeDragDrop","iiii","DragId","DropId","IsShift","IsControl")
	gen_in("NODEREMOVED_CB","TreeNodeRemoved","C","UserData")
	gen_in("RIGHTCLICK_CB","TreeRightClick","i","Id")
	gen_in("BUTTON_CB","MouseButton","iiiis","Button","Pressed","X","Y","Status")	
	gen_in("DROPFILES_CB","TreeDropFiles","siii","FileName","Num","X","Y")
	gen_in("MOTION_CB","MouseMotion","iis","X","Y","Status")	
	end_item(true)
	
	begin_item("Val")						
	gen_in("VALUECHANGED_CB","ValueChanged")
	end_item(true)					
end

function gen_ctls()

	begin_item("Cells")
	gen_in("DRAW_CB","CellsDraw","iiiiiiC","Line","Column","Xmin","Xmax","Ymin","Ymax","Cnv")
	gen_in("HEIGHT_CB","CellsHeight","i","Line")
	gen_in("HSPAN_CB","CellsHspan","ii","Line","Column")
	gen_in("MOUSECLICK_CB","CellsMouseClick","iiiiiis","Button","Pressed","Line","Column","X","Y","Status")
	gen_in("MOUSEMOTION_CB","CellsMouseMotion","iiiis","Line","Column","X","Y","R")
	gen_in("NCOLS_CB","CellsNcols")
	gen_in("NLINES_CB","CellsNlines")
	gen_in("SCROLLING_CB","CellsScrolling","ii","Line","Column")
	gen_in("VSPAN_CB","CellsVspan","ii","Line","Column")
	gen_in("WIDTH_CB","CellsWidth","i","Column")
	end_item(true)
	
	begin_item("Colorbar")
	gen_sn("CELL_CB","ColorbarCell","i","Cell")
	gen_in("EXTENDED_CB","ColorbarExtended","i","Cell")
	gen_in("SELECT_CB","ColorbarSelect","ii","Cell","Type")
	gen_in("SWITCH_CB","ColorbarSwitch","ii","PrimCell","SecCell")
	end_item(true)
	
	begin_item("ColorBrowser")
	gen_in("CHANGE_CB","ColorBrowserChange","ccc","R","G","B")
	gen_in("DRAG_CB","ColorBrowserDrag","ccc","R","G","B")
	gen_in("VALUECHANGED_CB","ValueChanged")
	end_item(true)
	
	begin_item("Dial")
	gen_in("BUTTON_PRESS_CB","DialButtonPress","d","Angle")
	gen_in("BUTTON_RELEASE_CB","DialButtonRelease","d","Angle")
	gen_in("MOUSEMOVE_CB","DialMouseMove","d","Angle")
	gen_in("VALUECHANGED_CB","ValueChanged")	
	end_item(true)
	
	begin_item("Matrix")
	gen_in("ACTION_CB","MatrixAction","iiiis","Key","Lin","Col","Edition","Value")
	gen_in("CLICK_CB","MatrixClick","iis","Lin","Col","Status")
	gen_in("RELEASE_CB","MatrixRelease","iis","Lin","Col","Status")
	gen_in("MOUSEMOVE_CB","MatrixMouseMove","ii","Lin","Col")
	gen_in("ENTERITEM_CB","MatrixEnterItem","ii","Lin","Col")
	gen_in("LEAVEITEM_CB","MatrixLeaveItem","ii","Lin","Col")
	gen_in("SCROLLTOP_CB","MatrixScrollTop","ii","Lin","Col")
	gen_in("BGCOLOR_CB","MatrixBgcolor","iiUUU","Lin","Col","Red","Green","Blue")
	gen_in("FGCOLOR_CB","MatrixFgcolor","iiUUU","Lin","Col","Red","Green","Blue")
	gen_in("FONT_CB","MatrixFont","ii","Lin","Col")
	gen_in("DRAW_CB","MatrixDraw","iiiiiiC","Lin","Col","X1","X2","Y1","Y2","Cnv")
	gen_in("DROPCHECK_CB","MatrixDropCheck","ii","Lin","Col")
	gen_in("DROP_CB","MatrixDrop","ii","Lin","Col")
	gen_in("DROPSELECT_CB","MatrixDropSelect","iinsii","Lin","Col","Drop","T","I","V")
	gen_in("EDITION_CB","MatrixEdition","iiii","Lin","Col","Mode","Update")
	gen_in("VALUE_CB","MatrixValue","ii","Lin","Col")
	gen_in("VALUE_EDIT_CB","MatrixValueEdit","iis","Lin","Col","NewValue")
	gen_in("MARK_CB","MatrixMark","ii","Lin","Col")
	gen_in("MARKEDIT_CB","MatrixMarkEdit","iii","Lin","Col","Marked")
	
	gen_in("ACTION","CanvasAction")
	gen_in("SCROLL_CB","CanvasScroll","iff","Op","PosX","PosY")
	gen_in("KEYPRESS_CB","CanvasKeyPress","ii","C","Press")
	gen_in("MOTION_CB","MouseMotion","iis","X","Y","Status")
	gen_in("RESIZE_CB","CanvasResize","ii","Width","Height")
	gen_in("BUTTON_CB","MouseButton","iiiis","Button","Pressed","X","Y","Status")
	gen_in("MAP_CB","CommonMap")
	end_item()	
	
	begin_item("OleControl")
	gen_in("MAP_CB","CommonMap")
	gen_in("UNMAP_CB","CommonUnmap")
	gen_in("GETFOCUS_CB","CommonGetFocus")
	gen_in("KILLFOCUS_CB","CommonKillFocus")
	gen_in("ENTERWINDOW_CB","CommonEnterWindow")
	gen_in("LEAVEWINDOW_CB","CommonLeaveWindow")
	end_item()
	
	begin_item("PPlot")
	gen_in("DELETE_CB","PPlotDelete","iiff","Index","SampleIndex","X","Y")
	gen_in("DELETEBEGIN_CB","PPlotDeleteBegin")
	gen_in("DELETEEND_CB","PPlotDeleteEnd")
	gen_in("SELECT_CB","PPlotSelect","iiffi","Index","SampleIndex","X","Y","Select")
	gen_in("SELECTBEGIN_CB","PPlotSelectBegin")
	gen_in("SELECTEND_CB","PPlotSelectEnd")
	gen_in("EDIT_CB","PPlotEdit","iiffFF","Index","SampleIndex","X","Y","NewX","NewY")
	gen_in("EDITBEGIN_CB","PPlotEditBegin")
	gen_in("EDITEND_CB","PPlotEditEnd")
	gen_in("PREDRAW_CB","PPlotPreDraw","C","Canvas")
	gen_in("POSTDRAW_CB","PPlotPostDraw","C","Canvas")
	end_item(true)
	
	begin_item("WebBrowser")
	gen_in("COMPLETED_CB","WebBrowserCompleted","s","Url")
	gen_in("ERROR_CB","WebBrowserError","s","Url")
	gen_in("NAVIGATE_CB","WebBrowserNavigate","s","Url")
	gen_in("NEWWINDOW_CB","WebBrowserNewWindow","s","Url")
	end_item(true)
	
	begin_item("TuioClient")
	gen_in("TOUCH_CB","TouchEvent","iis","X","Y","State")
	gen_in("MULTITOUCH_CB","MultiTouchEvent","iIIII","Count","Pid","Px","Py","PState")	
	end_item(true)
end

all = {}
function make_iup()
	all[#all+1] = code_head
	all[#all+1] = code_head_d
	all[#all+1] = table.concat(t_c_tmpl,"\n")
	all[#all+1] = code_import
	all[#all+1] = code_id_head .. table.concat(t_id_tag) ..code_id_end
	all[#all+1] = code_reg_head .. table.concat(t_id_reg) ..code_reg_end
	all[#all+1] = table.concat(t_id_new,"\n")
	all[#all+1] = table.concat(t_go_type,"\n")
	all[#all+1] = table.concat(t_id_callback,"\n")
	all[#all+1] = table.concat(t_go_tmpl,"\n")
end

function make_file(filename)
	local f = io.open(filename,"w")
	f:write(table.concat(all,"\n"))
	f:close()	
end

function show_all()
	print(table.concat(all,"\n"))
end

function main()
	-- clear
	clear()
	-- gen iup
	gen_iup()
	-- gen ctls
	gen_ctls()
	-- make all
	make_iup()
	-- print all
	show_all()
	-- make file
	make_file("iupobject.go")
end

main()
